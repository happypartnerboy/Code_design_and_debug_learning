#line 2 "clexer.cpp"

#line 4 "clexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer c__create_buffer
#define yy_delete_buffer c__delete_buffer
#define yy_flex_debug c__flex_debug
#define yy_init_buffer c__init_buffer
#define yy_flush_buffer c__flush_buffer
#define yy_load_buffer_state c__load_buffer_state
#define yy_switch_to_buffer c__switch_to_buffer
#define yyin c_in
#define yyleng c_leng
#define yylex c_lex
#define yylineno c_lineno
#define yyout c_out
#define yyrestart c_restart
#define yytext c_text
#define yywrap c_wrap
#define yyalloc c_alloc
#define yyrealloc c_realloc
#define yyfree c_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE c_restart(c_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t c_leng;

extern FILE *c_in, *c_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up c_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up c_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via c_restart()), so that the user can continue scanning by
	 * just pointing c_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when c_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t c_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow c_wrap()'s to do buffer switches
 * instead of setting up a fresh c_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void c_restart (FILE *input_file  );
void c__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE c__create_buffer (FILE *file,int size  );
void c__delete_buffer (YY_BUFFER_STATE b  );
void c__flush_buffer (YY_BUFFER_STATE b  );
void c_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void c_pop_buffer_state (void );

static void c_ensure_buffer_stack (void );
static void c__load_buffer_state (void );
static void c__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER c__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE c__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE c__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE c__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *c_alloc (yy_size_t  );
void *c_realloc (void *,yy_size_t  );
void c_free (void *  );

#define yy_new_buffer c__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        c_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            c__create_buffer(c_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        c_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            c__create_buffer(c_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define c_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *c_in = (FILE *) 0, *c_out = (FILE *) 0;

typedef int yy_state_type;

extern int c_lineno;

int c_lineno = 1;

extern char *c_text;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr c_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up c_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	c_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[404] =
    {   0,
        0,    0,   76,   76,   85,   85,  118,  116,  114,  111,
      113,   84,  116,  116,  116,  116,   90,   90,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,   76,
       78,   79,   77,   85,   86,   87,   89,  117,  112,   83,
        0,    0,  106,   75,   82,    0,   90,    0,  107,   91,
       92,    0,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   41,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   48,  115,  115,  115,  115,
      115,  115,  115,   53,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   76,   80,   77,   77,   81,   85,    0,   88,
      109,    0,  109,  108,   82,  106,    0,  106,   93,   96,
       94,   98,   28,   30,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   46,  115,  115,  115,   13,  115,
      115,  115,   49,   50,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   67,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   73,  110,   97,   95,   99,  100,  115,    1,

      115,  115,    2,  115,   34,  115,    3,  115,  115,  115,
      115,  115,  115,  115,  115,   43,    7,  115,  115,  115,
      115,  115,  115,   47,  115,   14,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   64,  115,   66,  115,  115,  115,
      115,  115,   25,  115,  115,  115,  115,  101,  104,  102,
      115,  115,   32,   33,   35,    4,   36,    5,  115,  115,
      115,  115,  115,  115,  115,  115,   45,   10,  115,  115,
      115,  115,  115,  115,   54,  115,  115,  115,  115,  115,
      115,   18,  115,  115,  115,  115,  115,  115,   65,  115,

      115,  115,   22,  115,   71,  115,  115,  115,   72,  115,
      105,  103,   29,   31,  115,  115,  115,   40,    6,  115,
      115,   44,    8,   11,   12,  115,  115,   51,  115,  115,
      115,   57,  115,  115,   59,   19,   60,   20,   21,   62,
      115,  115,   69,  115,  115,  115,  115,  115,   74,  115,
      115,   39,  115,  115,   15,  115,  115,   55,  115,  115,
      115,  115,  115,   68,  115,  115,   24,  115,   27,  115,
       38,  115,    9,  115,   52,  115,   17,  115,  115,   63,
       70,   23,   26,  115,  115,   16,   56,  115,  115,   37,
      115,  115,  115,  115,  115,   61,   42,  115,  115,  115,

      115,   58,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,    1,    1,    1,   14,   14,   14,   14,   15,   16,
       17,   17,   17,   17,   17,   18,   17,   17,   17,   17,
       17,   17,   17,   17,   19,   17,   17,   17,   17,   17,
        1,   20,    1,    1,   21,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   17,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[47] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    5,    1,    1,
        1,    6,    6,    7,    7,    7,    8,    8,    8,    1,
        7,    7,    7,    7,    7,    7,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8
    } ;

static yyconst flex_uint16_t yy_base[416] =
    {   0,
        0,    0,   44,   46,   52,   55,  229, 1319, 1319, 1319,
      215, 1319,    0,  173,   49,   55,   66,  144,   52,   55,
       74,   89,   87,   93,  104,  116,   61,  118,   78,  121,
      102,  132,   57,  136,  142,  147,  162,  165,  149,    0,
     1319,  182,   69,  147, 1319,  149, 1319,  141, 1319,    0,
      128,  101,  183, 1319,    0,  188,   59,  193, 1319,  189,
      132,    0,    0,  145,  178,  199,  201,  204,  207,  210,
      212,  215,  221,  226,  234,  236,  241,  243,  245,  251,
      256,  258,  260,  266,  268,  170,  271,  282,  277,  287,
      289,  293,  297,  300,  306,  302,  314,  316,  318,  325,

      322,  327,  336,  343,  345,  355,  349,  357,  359,  363,
      370,  365,    0, 1319,  112,  161, 1319,   77,   66, 1319,
     1319,   46,   44, 1319,    0,  386,  374,  384,  122, 1319,
      208,  386,  394,  396,  398,  404,  408,  410,  412,  417,
      422,  424,  430,  432,  434,  436,  438,  442,  455,  440,
      445,  457,  462,  466,  472,  474,  477,  479,  481,  483,
      485,  490,  492,  501,  505,  507,  511,  514,  516,  519,
      522,  524,  526,  528,  532,  534,  538,  547,  554,  556,
      558,  560,  563,  565,  568,  570,  572,  576,  584,  586,
      589,  592,  600, 1319, 1319, 1319,  596,  213,  605,  607,

      610,  613,  617,  621,  623,  626,  628,  630,  633,  635,
      637,  641,  644,  646,  648,  650,  658,  660,  664,  667,
      673,  675,  679,  681,  683,  685,  688,  691,  694,  696,
      709,  711,  713,  715,  719,  722,  725,  728,  730,  735,
      737,  740,  742,  747,  759,  761,  763,  765,  768,  770,
      772,  774,  776,  779,  784,  781,  797,  266, 1319,  244,
      793,  799,  801,  804,  808,  813,  815,  819,  821,  824,
      826,  831,  829,  834,  836,  838,  841,  848,  850,  852,
      854,  856,  858,  861,  867,  869,  872,  875,  877,  881,
      885,  890,  893,  898,  900,  902,  908,  910,  914,  917,

      921,  923,  926,  928,  935,  937,  939,  942,  944,  948,
     1319, 1319,  952,  954,  958,  960,  962,  964,  966,  968,
      974,  971,  976,  978,  981,  983,  985,  987,  993,  998,
     1000, 1002, 1004, 1006, 1008, 1010, 1013, 1020, 1022, 1024,
     1026, 1030, 1033, 1035, 1037, 1039, 1041, 1043, 1046, 1048,
     1052, 1062, 1064, 1067, 1069, 1074, 1076, 1078, 1080, 1082,
     1087, 1084, 1089, 1091, 1098, 1100, 1104, 1106, 1109, 1114,
     1116, 1118, 1121, 1123, 1125, 1127, 1131, 1133, 1135, 1138,
     1142, 1146, 1148, 1150, 1152, 1154, 1156, 1160, 1163, 1165,
     1167, 1169, 1171, 1175, 1179, 1181, 1183, 1186, 1191, 1195,

     1204, 1206, 1319, 1244, 1252, 1254, 1262, 1265, 1273, 1281,
     1289, 1297, 1305, 1308, 1310
    } ;

static yyconst flex_int16_t yy_def[416] =
    {   0,
      403,    1,  404,  404,  405,  405,  403,  403,  403,  403,
      403,  403,  406,  407,  403,  403,  403,   17,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      403,  403,  410,  411,  403,  403,  403,  411,  403,  406,
      403,  412,  403,  403,  413,  403,   17,  403,  403,  403,
      403,  414,  415,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  409,  403,  410,  410,  403,  411,  411,  403,
      403,  403,  403,  403,  413,  403,  403,  403,  403,  403,
      403,  414,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  403,  403,  403,  403,  403,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  403,  403,  403,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      403,  403,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,    0,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403
    } ;

static yyconst flex_uint16_t yy_nxt[1366] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,   15,
       16,   17,   18,   19,   19,   19,   19,   19,   19,    8,
       19,   20,   21,   22,   23,   24,   25,   26,   19,   27,
       19,   28,   29,   30,   31,   32,   19,   33,   34,   35,
       36,   37,   38,   39,   19,   19,   41,   42,   41,   42,
      194,   43,  194,   43,   45,   46,   47,   45,   46,   47,
       53,   53,   54,   63,   63,   55,   63,   63,   63,   63,
      118,   48,   63,   63,   48,   56,  116,   57,   57,  117,
       58,   59,   97,   60,   61,   63,   63,   86,   65,   63,
       63,   58,   59,   66,   87,   67,  119,   60,   63,   63,

       63,   63,  403,   68,   63,   63,   61,  123,   69,   62,
       71,   70,   75,   63,   63,   63,   63,   72,   89,  403,
       73,   76,  403,   74,   78,   81,   79,   63,   63,   63,
       63,   77,   63,   63,  121,   82,   80,   93,   83,   94,
      195,   84,   90,   63,   63,  118,   91,   63,   63,  131,
       85,  120,   88,   63,   63,   92,   63,   63,   63,   63,
       63,   63,  195,  131,   98,   99,  119,  102,  116,   95,
      103,  117,   96,   63,   63,  100,   63,   63,  101,  104,
      106,   63,   63,  112,  114,  107,  105,  403,  110,   63,
       63,  108,   52,  111,   53,   53,  109,   58,  124,  126,

      126,  127,  133,   59,  128,  128,  129,  130,   58,  124,
       63,   63,   63,   63,   59,   63,   63,   49,   63,   63,
      129,   63,   63,   63,   63,  196,   63,   63,  403,  130,
      260,  134,   63,   63,  403,  138,  141,   63,   63,  196,
      135,  137,  142,  136,  260,   63,   63,   63,   63,  403,
      139,  140,   63,   63,   63,   63,   63,   63,  143,  144,
      145,  312,   63,   63,  403,  146,  403,   63,   63,   63,
       63,   63,   63,  403,  148,  312,  147,   63,   63,   63,
       63,  149,   63,   63,  311,  150,  151,  153,   63,   63,
      152,  403,  154,   63,   63,  156,  403,  155,   63,   63,

       63,   63,  158,  403,   63,   63,  311,  157,   63,   63,
      159,   63,   63,   63,   63,  160,  161,   63,   63,  162,
      166,  403,  165,  403,  169,   63,   63,   63,   63,   63,
       63,  163,  164,   63,   63,  167,   63,   63,   63,   63,
      168,  170,  403,  171,  403,  174,  176,   63,   63,  403,
      173,  178,  403,  172,   63,   63,   63,   63,  403,  179,
       63,   63,  177,  175,  403,  180,   63,   63,   63,   63,
       63,   63,  403,  181,   63,   63,   63,   63,  187,  403,
      184,   63,   63,  182,  185,  128,  128,  183,  189,  403,
      190,  191,  403,  186,  188,  128,  128,  126,  126,  192,

       58,   59,  193,  197,  198,   63,   63,   63,   63,   63,
       63,   58,   59,  403,  199,   63,   63,  197,  403,   63,
       63,   63,   63,   63,   63,  201,  198,  403,   63,   63,
      403,  204,  200,   63,   63,   63,   63,  205,  202,  203,
      206,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,  212,   63,   63,  403,  207,
      214,  213,  208,  215,  403,  209,   63,   63,   63,   63,
      210,  211,  217,   63,   63,  403,  218,   63,   63,  219,
      216,  403,  220,   63,   63,   63,   63,  222,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  403,  223,

      221,   63,   63,   63,   63,  403,  227,  403,  225,  403,
      226,  224,   63,   63,  403,  228,   63,   63,   63,   63,
      403,  229,   63,   63,  403,   63,   63,   63,   63,  403,
       63,   63,  231,   63,   63,   63,   63,   63,   63,   63,
       63,  403,  230,   63,   63,   63,   63,  234,  235,   63,
       63,  403,  232,  233,  403,  236,  403,  240,   63,   63,
      403,  239,  403,  238,  237,   63,   63,   63,   63,   63,
       63,   63,   63,  241,   63,   63,   63,   63,  242,   63,
       63,   63,   63,   63,   63,  247,  243,   63,   63,  244,
      248,  403,  246,  403,  245,   63,   63,   63,   63,  250,

       63,   63,  249,   63,   63,  251,  403,  254,  253,  403,
      255,   63,   63,  258,  259,  252,   63,   63,   63,   63,
      257,   63,   63,  256,   63,   63,  403,  258,   63,   63,
      261,  403,   63,   63,   63,   63,  259,   63,   63,   63,
       63,   63,   63,  262,   63,   63,   63,   63,   63,   63,
      263,  264,   63,   63,  265,   63,   63,   63,   63,   63,
       63,   63,   63,  403,  267,  403,  269,  403,  266,   63,
       63,   63,   63,  403,  268,   63,   63,  272,   63,   63,
      273,  270,  403,  271,   63,   63,   63,   63,  403,  274,
       63,   63,   63,   63,   63,   63,   63,   63,  277,   63,

       63,  275,   63,   63,  276,   63,   63,   63,   63,  403,
      281,  403,  279,  403,  278,  403,  280,  284,  403,  283,
       63,   63,   63,   63,   63,   63,   63,   63,  403,  282,
       63,   63,  286,   63,   63,  403,   63,   63,  287,   63,
       63,   63,   63,  403,  288,  285,   63,   63,   63,   63,
      403,   63,   63,   63,   63,  293,  403,  289,   63,   63,
      403,  290,  291,  296,  403,  297,  295,  292,  403,  294,
       63,   63,   63,   63,   63,   63,   63,   63,  298,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,  300,
       63,   63,   63,   63,  301,   63,   63,  304,  302,  305,

      403,  303,  403,  299,   63,   63,  309,  403,   63,   63,
       63,   63,   63,   63,  306,   63,   63,  403,  307,   63,
       63,  308,  310,  314,   63,   63,   63,   63,  403,  313,
       63,   63,   63,   63,  403,   63,   63,   63,   63,  315,
       63,   63,   63,   63,  403,   63,   63,   63,   63,   63,
       63,  318,   63,   63,  316,  317,  319,  321,  320,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,  323,   63,   63,  324,  322,  403,  325,   63,   63,
       63,   63,  403,   63,   63,  326,   63,   63,   63,   63,
      403,  327,   63,   63,  328,  331,   63,   63,  332,  403,

      329,   63,   63,  403,   63,   63,  334,  403,  330,   63,
       63,   63,   63,   63,   63,  403,  333,  336,  335,   63,
       63,   63,   63,  338,  337,   63,   63,  403,   63,   63,
      403,  341,   63,   63,   63,   63,  340,   63,   63,   63,
       63,  339,  342,  403,  344,  343,   63,   63,   63,   63,
       63,   63,  403,   63,   63,   63,   63,  403,  346,   63,
       63,  345,  348,   63,   63,   63,   63,  403,  347,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,  350,   63,   63,  349,   63,   63,   63,   63,   63,
       63,  353,   63,   63,   63,   63,   63,   63,   63,   63,

      351,  352,  403,  354,   63,   63,  356,  403,  355,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,  358,   63,   63,  403,  357,  403,  360,
      403,   63,   63,   63,   63,   63,   63,   63,   63,  359,
      362,   63,   63,  361,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,  364,   63,   63,   63,
       63,  403,  366,   63,   63,  363,  403,  365,  403,  370,
      367,  403,  368,   63,   63,   63,   63,  371,   63,   63,
       63,   63,  369,  403,  372,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,  374,   63,   63,

       63,   63,   63,   63,  403,  376,  373,  379,  403,   63,
       63,   63,   63,  375,  380,   63,   63,   63,   63,  377,
       63,   63,  378,  381,  382,   63,   63,   63,   63,   63,
       63,  383,   63,   63,   63,   63,   63,   63,   63,   63,
      403,  385,   63,   63,   63,   63,   63,   63,  386,   63,
       63,  387,  384,   63,   63,  403,  389,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,  403,
      388,   63,   63,  391,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,  403,  392,   63,   63,  403,  390,
       63,   63,   63,   63,   63,   63,  403,   63,   63,  398,

      403,  393,   63,   63,  403,  394,   63,   63,  395,  399,
      396,  403,  400,  403,  397,   63,   63,   63,   63,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  401,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  402,   40,   40,   40,   40,   40,   40,
       40,   40,   44,   44,   44,   44,   44,   44,   44,   44,
       50,   50,   51,  403,   51,   51,   51,   51,   51,   51,
       64,   64,   64,  113,  403,  403,  113,  403,  113,  113,
      113,  115,  403,  403,  115,  115,  115,  115,  115,  118,
      403,  403,  403,  118,  118,  118,  118,  122,  403,  122,

      122,  122,  122,  122,  122,  125,  403,  403,  125,  125,
      125,  125,  125,  132,  132,   63,   63,   63,    7,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403
    } ;

static yyconst flex_int16_t yy_chk[1366] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    4,    4,
      123,    3,  122,    4,    5,    5,    5,    6,    6,    6,
       15,   15,   16,   19,   19,   16,   20,   20,   33,   33,
      119,    5,   27,   27,    6,   17,   43,   17,   17,   43,
       17,   17,   33,   17,   17,   21,   21,   27,   20,   29,
       29,   17,   17,   20,   27,   20,  118,   17,   23,   23,

       22,   22,   57,   21,   24,   24,   17,   52,   21,   17,
       22,   21,   23,   31,   31,   25,   25,   22,   29,  115,
       22,   23,  115,   22,   24,   25,   24,   26,   26,   28,
       28,   23,   30,   30,   51,   25,   24,   31,   25,   31,
      129,   25,   30,   32,   32,   48,   30,   34,   34,   61,
       26,   46,   28,   35,   35,   30,   64,   64,   36,   36,
       39,   39,  129,   61,   34,   34,   44,   35,  116,   32,
       35,  116,   32,   37,   37,   34,   38,   38,   34,   35,
       36,   86,   86,   39,   42,   36,   35,   18,   38,   65,
       65,   37,   14,   38,   53,   53,   37,   53,   53,   56,

       56,   58,   65,   56,   58,   58,   60,   60,   53,   53,
       66,   66,   67,   67,   56,   68,   68,   11,   69,   69,
       60,   70,   70,   71,   71,  131,   72,   72,    7,   60,
      198,   66,   73,   73,    0,   70,   72,   74,   74,  131,
       67,   69,   73,   68,  198,   75,   75,   76,   76,    0,
       71,   71,   77,   77,   78,   78,   79,   79,   74,   74,
       75,  260,   80,   80,    0,   75,    0,   81,   81,   82,
       82,   83,   83,    0,   77,  260,   76,   84,   84,   85,
       85,   78,   87,   87,  258,   79,   80,   81,   89,   89,
       80,    0,   82,   88,   88,   84,    0,   83,   90,   90,

       91,   91,   87,    0,   92,   92,  258,   85,   93,   93,
       87,   94,   94,   96,   96,   88,   89,   95,   95,   90,
       94,    0,   93,    0,   96,   97,   97,   98,   98,   99,
       99,   91,   92,  101,  101,   95,  100,  100,  102,  102,
       95,   97,    0,   97,    0,   99,  100,  103,  103,    0,
       98,  101,    0,   97,  104,  104,  105,  105,    0,  102,
      107,  107,  100,   99,    0,  103,  106,  106,  108,  108,
      109,  109,    0,  103,  110,  110,  112,  112,  107,    0,
      105,  111,  111,  104,  106,  127,  127,  104,  109,    0,
      109,  110,    0,  106,  108,  128,  128,  126,  126,  111,

      126,  126,  112,  132,  132,  133,  133,  134,  134,  135,
      135,  126,  126,    0,  133,  136,  136,  132,    0,  137,
      137,  138,  138,  139,  139,  136,  132,    0,  140,  140,
        0,  138,  135,  141,  141,  142,  142,  139,  136,  137,
      140,  143,  143,  144,  144,  145,  145,  146,  146,  147,
      147,  150,  150,  148,  148,  145,  151,  151,    0,  141,
      147,  146,  142,  148,    0,  143,  149,  149,  152,  152,
      144,  144,  150,  153,  153,    0,  151,  154,  154,  151,
      149,    0,  152,  155,  155,  156,  156,  154,  157,  157,
      158,  158,  159,  159,  160,  160,  161,  161,    0,  156,

      153,  162,  162,  163,  163,    0,  161,    0,  158,    0,
      160,  157,  164,  164,    0,  162,  165,  165,  166,  166,
        0,  164,  167,  167,    0,  168,  168,  169,  169,    0,
      170,  170,  166,  171,  171,  172,  172,  173,  173,  174,
      174,    0,  165,  175,  175,  176,  176,  169,  170,  177,
      177,    0,  167,  168,    0,  171,    0,  175,  178,  178,
        0,  174,    0,  173,  172,  179,  179,  180,  180,  181,
      181,  182,  182,  176,  183,  183,  184,  184,  177,  185,
      185,  186,  186,  187,  187,  182,  178,  188,  188,  179,
      184,    0,  181,    0,  180,  189,  189,  190,  190,  186,

      191,  191,  185,  192,  192,  187,    0,  190,  189,    0,
      191,  193,  193,  197,  197,  188,  199,  199,  200,  200,
      193,  201,  201,  192,  202,  202,    0,  197,  203,  203,
      199,    0,  204,  204,  205,  205,  197,  206,  206,  207,
      207,  208,  208,  201,  209,  209,  210,  210,  211,  211,
      202,  204,  212,  212,  206,  213,  213,  214,  214,  215,
      215,  216,  216,    0,  209,    0,  211,    0,  208,  217,
      217,  218,  218,    0,  210,  219,  219,  214,  220,  220,
      215,  212,    0,  213,  221,  221,  222,  222,    0,  218,
      223,  223,  224,  224,  225,  225,  226,  226,  221,  227,

      227,  219,  228,  228,  220,  229,  229,  230,  230,    0,
      227,    0,  223,    0,  222,    0,  225,  230,    0,  229,
      231,  231,  232,  232,  233,  233,  234,  234,    0,  228,
      235,  235,  232,  236,  236,    0,  237,  237,  233,  238,
      238,  239,  239,    0,  234,  231,  240,  240,  241,  241,
        0,  242,  242,  243,  243,  239,    0,  235,  244,  244,
        0,  236,  237,  242,    0,  243,  241,  238,    0,  240,
      245,  245,  246,  246,  247,  247,  248,  248,  244,  249,
      249,  250,  250,  251,  251,  252,  252,  253,  253,  248,
      254,  254,  256,  256,  248,  255,  255,  250,  248,  251,

        0,  249,    0,  246,  261,  261,  256,    0,  257,  257,
      262,  262,  263,  263,  252,  264,  264,    0,  254,  265,
      265,  255,  257,  262,  266,  266,  267,  267,    0,  261,
      268,  268,  269,  269,    0,  270,  270,  271,  271,  268,
      273,  273,  272,  272,    0,  274,  274,  275,  275,  276,
      276,  271,  277,  277,  269,  270,  272,  274,  273,  278,
      278,  279,  279,  280,  280,  281,  281,  282,  282,  283,
      283,  276,  284,  284,  279,  275,    0,  280,  285,  285,
      286,  286,    0,  287,  287,  281,  288,  288,  289,  289,
        0,  282,  290,  290,  283,  287,  291,  291,  288,    0,

      284,  292,  292,    0,  293,  293,  290,    0,  286,  294,
      294,  295,  295,  296,  296,    0,  289,  293,  291,  297,
      297,  298,  298,  295,  294,  299,  299,    0,  300,  300,
        0,  298,  301,  301,  302,  302,  297,  303,  303,  304,
      304,  296,  300,    0,  302,  301,  305,  305,  306,  306,
      307,  307,    0,  308,  308,  309,  309,    0,  306,  310,
      310,  304,  308,  313,  313,  314,  314,    0,  307,  315,
      315,  316,  316,  317,  317,  318,  318,  319,  319,  320,
      320,  315,  322,  322,  310,  321,  321,  323,  323,  324,
      324,  320,  325,  325,  326,  326,  327,  327,  328,  328,

      316,  317,    0,  321,  329,  329,  327,    0,  326,  330,
      330,  331,  331,  332,  332,  333,  333,  334,  334,  335,
      335,  336,  336,  330,  337,  337,    0,  329,    0,  333,
        0,  338,  338,  339,  339,  340,  340,  341,  341,  331,
      338,  342,  342,  334,  343,  343,  344,  344,  345,  345,
      346,  346,  347,  347,  348,  348,  342,  349,  349,  350,
      350,    0,  345,  351,  351,  341,    0,  344,    0,  350,
      346,    0,  347,  352,  352,  353,  353,  351,  354,  354,
      355,  355,  348,    0,  353,  356,  356,  357,  357,  358,
      358,  359,  359,  360,  360,  362,  362,  356,  361,  361,

      363,  363,  364,  364,    0,  359,  354,  362,    0,  365,
      365,  366,  366,  357,  363,  367,  367,  368,  368,  360,
      369,  369,  361,  365,  366,  370,  370,  371,  371,  372,
      372,  368,  373,  373,  374,  374,  375,  375,  376,  376,
        0,  372,  377,  377,  378,  378,  379,  379,  374,  380,
      380,  376,  370,  381,  381,    0,  379,  382,  382,  383,
      383,  384,  384,  385,  385,  386,  386,  387,  387,    0,
      378,  388,  388,  385,  389,  389,  390,  390,  391,  391,
      392,  392,  393,  393,    0,  388,  394,  394,    0,  384,
      395,  395,  396,  396,  397,  397,    0,  398,  398,  395,

        0,  389,  399,  399,    0,  391,  400,  400,  392,  398,
      393,    0,  399,    0,  394,  401,  401,  402,  402,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  400,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  401,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  407,    0,  407,  407,  407,  407,  407,  407,
      408,  408,  408,  409,    0,    0,  409,    0,  409,  409,
      409,  410,    0,    0,  410,  410,  410,  410,  410,  411,
        0,    0,    0,  411,  411,  411,  411,  412,    0,  412,

      412,  412,  412,  412,  412,  413,    0,    0,  413,  413,
      413,  413,  413,  414,  414,  415,  415,  415,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int c__flex_debug;
int c__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *c_text;
#line 1 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
#define YY_NO_INPUT 1
#line 14 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"

#include <stdio.h>
#include "tokenizer.h"


#line 931 "clexer.cpp"

#define INITIAL 0
#define comment 1
#define string_literal 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int c_lex_destroy (void );

int c_get_debug (void );

void c_set_debug (int debug_flag  );

YY_EXTRA_TYPE c_get_extra (void );

void c_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *c_get_in (void );

void c_set_in  (FILE * _in_str  );

FILE *c_get_out (void );

void c_set_out  (FILE * _out_str  );

yy_size_t c_get_leng (void );

char *c_get_text (void );

int c_get_lineno (void );

void c_set_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int c_wrap (void );
#else
extern int c_wrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( c_text, c_leng, 1, c_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( c_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( c_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, c_in))==0 && ferror(c_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(c_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int c_lex (void);

#define YY_DECL int c_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after c_text and c_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! c_in )
			c_in = stdin;

		if ( ! c_out )
			c_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			c_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				c__create_buffer(c_in,YY_BUF_SIZE );
		}

		c__load_buffer_state( );
		}

	{
#line 22 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"

#line 1151 "clexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of c_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 404 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1319 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 23 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 24 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 25 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 26 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 27 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 28 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 29 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 30 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 31 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 32 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 33 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 34 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 49 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 61 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 62 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 63 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 64 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 65 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 66 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 67 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 68 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 69 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 70 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 71 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 72 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 73 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 74 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 75 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 76 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 77 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 78 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 79 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 80 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 81 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 82 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 83 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 84 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 85 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 86 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 87 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 88 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 89 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 90 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 91 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 92 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 93 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 94 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 95 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 96 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 97 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 99 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ BEGIN(comment); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 100 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 101 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 102 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 103 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 104 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 105 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ BEGIN(INITIAL); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 107 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_DIRECTIVE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 111 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ BEGIN(string_literal);    return(TOKENIZER_LITERAL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 112 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 113 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 114 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 115 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ BEGIN(INITIAL);           return(TOKENIZER_LITERAL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 136 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 137 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 138 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 140 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 141 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 143 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 144 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 145 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 146 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 147 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 148 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 150 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"
ECHO;
	YY_BREAK
#line 1799 "clexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string_literal):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed c_in at a new source and called
			 * c_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = c_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( c_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * c_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of c_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					c_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			c_restart(c_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) c_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 404 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 404 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 403);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					c_restart(c_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( c_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve c_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void c_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        c_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            c__create_buffer(c_in,YY_BUF_SIZE );
	}

	c__init_buffer(YY_CURRENT_BUFFER,input_file );
	c__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void c__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		c_pop_buffer_state();
	 *		c_push_buffer_state(new_buffer);
     */
	c_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	c__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (c_wrap()) processing, but the only time this flag
	 * is looked at is after c_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void c__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	c_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE c__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) c_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in c__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) c_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in c__create_buffer()" );

	b->yy_is_our_buffer = 1;

	c__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with c__create_buffer()
 * 
 */
    void c__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		c_free((void *) b->yy_ch_buf  );

	c_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a c_restart() or at EOF.
 */
    static void c__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	c__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then c__init_buffer was _probably_
     * called from c_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void c__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		c__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void c_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	c_ensure_buffer_stack();

	/* This block is copied from c__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from c__switch_to_buffer. */
	c__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void c_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	c__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		c__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void c_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)c_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in c_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)c_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in c_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE c__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) c_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in c__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	c__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to c_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       c__scan_bytes() instead.
 */
YY_BUFFER_STATE c__scan_string (yyconst char * yystr )
{
    
	return c__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to c_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE c__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) c_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in c__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = c__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in c__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up c_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		c_text[c_leng] = (yy_hold_char); \
		(yy_c_buf_p) = c_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		c_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int c_get_lineno  (void)
{
        
    return c_lineno;
}

/** Get the input stream.
 * 
 */
FILE *c_get_in  (void)
{
        return c_in;
}

/** Get the output stream.
 * 
 */
FILE *c_get_out  (void)
{
        return c_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t c_get_leng  (void)
{
        return c_leng;
}

/** Get the current token.
 * 
 */

char *c_get_text  (void)
{
        return c_text;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void c_set_lineno (int  _line_number )
{
    
    c_lineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see c__switch_to_buffer
 */
void c_set_in (FILE *  _in_str )
{
        c_in = _in_str ;
}

void c_set_out (FILE *  _out_str )
{
        c_out = _out_str ;
}

int c_get_debug  (void)
{
        return c__flex_debug;
}

void c_set_debug (int  _bdebug )
{
        c__flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from c_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    c_in = stdin;
    c_out = stdout;
#else
    c_in = (FILE *) 0;
    c_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * c_lex_init()
     */
    return 0;
}

/* c_lex_destroy is for both reentrant and non-reentrant scanners. */
int c_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		c__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		c_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	c_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * c_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *c_alloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *c_realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void c_free (void * ptr )
{
			free( (char *) ptr );	/* see c_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 150 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/clexer.lpp"



