#line 2 "asmlexer.cpp"

#line 4 "asmlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer asm__create_buffer
#define yy_delete_buffer asm__delete_buffer
#define yy_flex_debug asm__flex_debug
#define yy_init_buffer asm__init_buffer
#define yy_flush_buffer asm__flush_buffer
#define yy_load_buffer_state asm__load_buffer_state
#define yy_switch_to_buffer asm__switch_to_buffer
#define yyin asm_in
#define yyleng asm_leng
#define yylex asm_lex
#define yylineno asm_lineno
#define yyout asm_out
#define yyrestart asm_restart
#define yytext asm_text
#define yywrap asm_wrap
#define yyalloc asm_alloc
#define yyrealloc asm_realloc
#define yyfree asm_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE asm_restart(asm_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t asm_leng;

extern FILE *asm_in, *asm_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up asm_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up asm_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via asm_restart()), so that the user can continue scanning by
	 * just pointing asm_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when asm_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t asm_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow asm_wrap()'s to do buffer switches
 * instead of setting up a fresh asm_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void asm_restart (FILE *input_file  );
void asm__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE asm__create_buffer (FILE *file,int size  );
void asm__delete_buffer (YY_BUFFER_STATE b  );
void asm__flush_buffer (YY_BUFFER_STATE b  );
void asm_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void asm_pop_buffer_state (void );

static void asm_ensure_buffer_stack (void );
static void asm__load_buffer_state (void );
static void asm__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER asm__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE asm__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE asm__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE asm__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *asm_alloc (yy_size_t  );
void *asm_realloc (void *,yy_size_t  );
void asm_free (void *  );

#define yy_new_buffer asm__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        asm_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            asm__create_buffer(asm_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        asm_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            asm__create_buffer(asm_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define asm_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *asm_in = (FILE *) 0, *asm_out = (FILE *) 0;

typedef int yy_state_type;

extern int asm_lineno;

int asm_lineno = 1;

extern char *asm_text;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr asm_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up asm_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	asm_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[432] =
    {   0,
        0,    0,   82,   82,   91,   91,  124,  122,  120,  117,
      119,   90,  122,  122,  122,  122,   96,   96,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,   82,   84,   85,   83,   91,
       92,   93,   95,  123,  118,   89,    0,    0,  112,   81,
       88,    0,   96,    0,  113,   97,   98,    0,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,   41,  121,  121,
      121,  121,  121,  121,  121,  121,  121,   48,  121,  121,

      121,  121,  121,  121,  121,   53,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,   82,   86,   83,   83,   87,   91,
        0,   94,  115,    0,  115,  114,   88,  112,    0,  112,
       99,  102,  100,  104,  121,  121,   80,  121,  121,  121,
       28,   30,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,   46,  121,  121,  121,   13,  121,  121,  121,
       49,   50,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

       67,  121,  121,  121,  121,  121,  121,  121,  121,  121,
       73,  116,  103,  101,  105,  106,   79,  121,  121,   78,
      121,  121,    1,  121,  121,    2,  121,   34,  121,    3,
      121,  121,  121,  121,  121,  121,  121,  121,   43,    7,
      121,  121,  121,  121,  121,  121,   47,  121,   14,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,   64,  121,   66,
      121,  121,  121,  121,  121,   25,  121,  121,  121,  121,
      107,  110,  108,   77,   75,  121,  121,  121,   32,   33,
       35,    4,   36,    5,  121,  121,  121,  121,  121,  121,

      121,  121,   45,   10,  121,  121,  121,  121,  121,  121,
       54,  121,  121,  121,  121,  121,  121,   18,  121,  121,
      121,  121,  121,  121,   65,  121,  121,  121,   22,  121,
       71,  121,  121,  121,   72,  121,  111,  109,  121,   29,
       31,  121,  121,  121,   40,    6,  121,  121,   44,    8,
       11,   12,  121,  121,   51,  121,  121,  121,   57,  121,
      121,   59,   19,   60,   20,   21,   62,  121,  121,   69,
      121,  121,  121,  121,  121,   74,   76,  121,  121,   39,
      121,  121,   15,  121,  121,   55,  121,  121,  121,  121,
      121,   68,  121,  121,   24,  121,   27,  121,   38,  121,

        9,  121,   52,  121,   17,  121,  121,   63,   70,   23,
       26,  121,  121,   16,   56,  121,  121,   37,  121,  121,
      121,  121,  121,   61,   42,  121,  121,  121,  121,   58,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,    1,    1,
        1,    1,    1,    1,   14,   15,   14,   16,   17,   18,
       19,   19,   19,   19,   19,   20,   21,   19,   22,   23,
       24,   25,   19,   26,   27,   19,   28,   29,   30,   19,
        1,   31,    1,    1,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   19,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[58] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    5,    1,    1,
        1,    6,    6,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst flex_uint16_t yy_base[444] =
    {   0,
        0,    0,   55,   57,   63,   66,  301, 1415, 1415, 1415,
      279, 1415,    0,  243,   60,   66,   88,  193,   63,   66,
       71,   69,   74,   91,   97,   77,  104,  108,  120,  122,
      125,  134,  111,  147,  149,  151,  157,  160,   99,  170,
      177,  173,  179,   79,  182,    0, 1415,  210,   77,  174,
     1415,  197, 1415,  182, 1415,    0,  174,  137,  217, 1415,
        0,  219,   73,  166, 1415,  195,   87,    0,    0,  186,
      190,  227,  231,  229,  233,  240,  247,  250,  252,  254,
      256,  258,  260,  263,  265,  268,  276,  272,  278,  280,
      274,  287,  294,  296,  303,  195,  305,  308,  315,  319,

      323,  327,  331,  333,  335,  337,  341,  347,  349,  355,
      363,  365,  367,  379,  381,  383,  391,  393,  399,  397,
      404,  412,  414,  416,    0, 1415,  131,  144, 1415,   62,
       75, 1415, 1415,   57,   55, 1415,    0,  419,  406,  429,
      252, 1415,  176,  424,  436,  446,  448,  450,  456,  461,
      465,  467,  469,  471,  473,  475,  481,  478,  483,  486,
      488,  490,  493,  497,  499,  509,  507,  511,  515,  517,
      525,  533,  535,  537,  539,  547,  544,  550,  557,  555,
      552,  559,  564,  566,  568,  571,  574,  582,  584,  586,
      588,  594,  596,  592,  598,  602,  607,  612,  614,  618,

      622,  628,  632,  634,  636,  639,  644,  646,  651,  654,
      656, 1415, 1415, 1415,  650,  207,  659,  670,  679,  661,
      686,  688,  691,  693,  697,  699,  701,  703,  705,  707,
      709,  711,  714,  716,  718,  720,  723,  728,  735,  737,
      739,  743,  748,  750,  755,  762,  764,  766,  769,  771,
      773,  776,  781,  778,  783,  787,  789,  791,  796,  805,
      807,  809,  815,  819,  821,  824,  826,  830,  832,  836,
      838,  840,  850,  852,  854,  858,  860,  863,  865,  868,
      270, 1415,  343,  875,  880,  882,  884,  886,  888,  891,
      896,  901,  903,  905,  907,  911,  913,  916,  918,  921,

      923,  926,  928,  930,  932,  935,  945,  948,  950,  952,
      954,  957,  964,  966,  968,  970,  972,  974,  977,  980,
      992,  984,  997,  999, 1002, 1008, 1010, 1016, 1012, 1018,
     1021, 1026, 1028, 1030, 1035, 1038, 1415, 1415, 1040, 1042,
     1045, 1048, 1052, 1054, 1058, 1060, 1062, 1065, 1067, 1069,
     1072, 1075, 1077, 1079, 1081, 1083, 1086, 1088, 1090, 1095,
     1097, 1103, 1105, 1107, 1109, 1112, 1114, 1118, 1121, 1123,
     1130, 1125, 1132, 1135, 1137, 1139, 1141, 1143, 1145, 1148,
     1151, 1153, 1155, 1158, 1160, 1167, 1173, 1177, 1182, 1179,
     1184, 1186, 1188, 1194, 1190, 1199, 1203, 1205, 1207, 1210,

     1215, 1219, 1221, 1225, 1227, 1229, 1231, 1234, 1236, 1238,
     1240, 1245, 1247, 1250, 1253, 1255, 1257, 1259, 1261, 1263,
     1269, 1271, 1273, 1275, 1277, 1281, 1285, 1287, 1289, 1291,
     1415, 1340, 1348, 1350, 1358, 1361, 1369, 1377, 1385, 1393,
     1401, 1404, 1406
    } ;

static yyconst flex_int16_t yy_def[444] =
    {   0,
      431,    1,  432,  432,  433,  433,  431,  431,  431,  431,
      431,  431,  434,  435,  431,  431,  431,   17,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  437,  431,  431,  438,  439,
      431,  431,  431,  439,  431,  434,  431,  440,  431,  431,
      441,  431,   17,  431,  431,  431,  431,  442,  443,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  437,  431,  438,  438,  431,  439,
      439,  431,  431,  431,  431,  431,  441,  431,  431,  431,
      431,  431,  431,  442,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  431,  431,  431,  431,  431,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      431,  431,  431,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  431,  431,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
        0,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431
    } ;

static yyconst flex_uint16_t yy_nxt[1473] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,   15,
       16,   17,   18,   19,   20,   21,   19,   19,   19,   19,
       19,   19,   22,   23,   19,   19,   19,   24,   25,   19,
        8,   19,   26,   27,   28,   29,   30,   31,   32,   19,
       33,   19,   34,   35,   36,   37,   38,   19,   39,   40,
       41,   42,   43,   44,   45,   19,   19,   47,   48,   47,
       48,  212,   49,  212,   49,   51,   52,   53,   51,   52,
       53,   59,   59,   60,   69,   69,   61,   69,   69,  130,
       69,   69,   69,   69,  128,   69,   69,  129,   69,   69,
       69,   69,  131,   54,   73,   71,   54,   62,   72,   63,

       63,   74,   69,   69,   64,   65,  143,   66,   69,   69,
       69,   69,   75,  122,   67,   69,   69,   76,  123,   69,
       69,   77,   69,   69,   64,   65,   78,  431,   79,  143,
       66,   69,   69,   69,   69,  109,   69,   69,  431,   67,
       83,  431,   68,  135,   80,   69,   69,   84,   98,   81,
       85,  128,   82,   86,  129,   99,   87,   93,   69,   69,
       69,   69,   69,   69,   90,   88,   91,   94,   69,   69,
       95,   69,   69,   96,  139,   89,   92,  140,  140,   97,
      133,   69,   69,  102,   69,   69,  130,  103,   69,   69,
       69,   69,  100,   69,   69,  214,  104,   69,   69,  132,

      101,   69,   69,  105,  131,  106,   69,   69,  107,  110,
      111,  108,  126,  114,  141,  145,  115,  118,  214,  120,
      112,  142,  119,  113,  121,  116,  283,  124,   59,   59,
      138,  138,  117,   64,  136,  174,   65,  141,   69,   69,
       69,   69,   69,   69,   69,   69,  142,  431,  146,  283,
      148,   69,   69,   64,  136,  147,   65,  149,   69,   69,
      150,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   58,   69,   69,   69,   69,  213,   69,
       69,   55,  151,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,  152,  156,  159,  337,  160,   69,   69,

      431,  155,  153,  213,  154,   69,   69,   69,   69,  157,
      158,  161,  162,  163,   69,   69,   69,   69,  164,   69,
       69,  337,  166,  165,  431,  168,   69,   69,  431,  167,
       69,   69,  431,  169,   69,   69,  171,  170,   69,   69,
      431,  172,   69,   69,   69,   69,   69,   69,   69,   69,
      431,  173,   69,   69,  431,  175,  431,  176,   69,   69,
       69,   69,  338,  178,  431,  177,   69,   69,  184,  431,
      180,  183,  431,  179,   69,   69,   69,   69,   69,   69,
      187,  185,  431,  182,  181,  338,  186,  188,  431,  189,
       69,   69,   69,   69,   69,   69,  431,  194,  431,  190,

      191,  192,   69,   69,   69,   69,  431,  196,   69,   69,
       69,   69,  431,  195,  431,   69,   69,  140,  140,  193,
      431,  198,  197,   69,   69,   69,   69,   69,   69,  199,
      138,  138,  431,  203,  200,   64,   65,  202,  201,  205,
      140,  140,  204,  215,  207,  206,  208,   69,   69,  431,
      216,  209,  217,  431,  210,   64,   65,   69,   69,   69,
       69,   69,   69,  431,  211,  431,  215,   69,   69,  431,
      218,  220,   69,   69,  219,  216,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,  221,   69,
       69,  431,   69,   69,   69,   69,  222,   69,   69,   69,

       69,   69,   69,  224,   69,   69,  431,  227,   69,   69,
       69,   69,  229,  431,  223,  226,  225,  228,   69,   69,
       69,   69,   69,   69,  431,  235,   69,   69,   69,   69,
      431,  230,  237,  236,  232,  231,   69,   69,  431,  233,
      234,  238,  431,  239,   69,   69,   69,   69,   69,   69,
       69,   69,  431,  243,  240,   69,   69,  241,   69,   69,
      242,   69,   69,   69,   69,  245,   69,   69,   69,   69,
       69,   69,  431,  246,  244,   69,   69,   69,   69,   69,
       69,  431,   69,   69,  247,   69,   69,  248,  249,  250,
      252,  251,  431,   69,   69,   69,   69,   69,   69,   69,

       69,  431,  254,   69,   69,   69,   69,   69,   69,   69,
       69,  431,  253,   69,   69,  431,  257,  431,   69,   69,
      255,  256,  258,   69,   69,   69,   69,  431,  259,   69,
       69,  431,  263,   69,   69,  431,  261,  260,  262,   69,
       69,  431,  264,   69,   69,   69,   69,   69,   69,  265,
       69,   69,  266,  267,  270,   69,   69,   69,   69,  269,
      431,  268,   69,   69,  271,   69,   69,   69,   69,  281,
       69,   69,   69,   69,  273,  431,  282,  272,  277,  276,
      274,   69,   69,  278,  431,  284,  431,  280,  431,  275,
       69,   69,  281,  431,  285,  431,  279,   69,   69,   69,

       69,  282,   69,   69,   69,   69,  431,  286,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,  287,   69,   69,   69,   69,   69,
       69,   69,   69,  431,   69,   69,  431,  288,  431,   69,
       69,  431,  290,  431,  291,  289,   69,   69,   69,   69,
       69,   69,  431,  293,   69,   69,  295,  431,  292,   69,
       69,   69,   69,  431,  294,  298,   69,   69,  431,  296,
      297,  299,  431,   69,   69,   69,   69,   69,   69,  300,
       69,   69,   69,   69,   69,   69,  303,   69,   69,   69,
       69,  301,   69,   69,   69,   69,  302,  431,   69,   69,

       69,   69,   69,   69,  307,  304,  305,   69,   69,  431,
      306,  431,  309,  310,  431,  312,   69,   69,   69,   69,
       69,   69,  308,  313,  431,  311,   69,   69,  431,  314,
       69,   69,   69,   69,  431,   69,   69,   69,   69,  431,
      315,   69,   69,   69,   69,  319,  316,   69,   69,   69,
       69,   69,   69,  317,  431,  322,  431,  318,  323,  321,
      320,   69,   69,   69,   69,   69,   69,  431,  324,   69,
       69,   69,   69,  326,   69,   69,   69,   69,  327,   69,
       69,  431,  328,  431,  329,  325,   69,   69,  330,  431,
      331,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,  335,   69,   69,  336,  332,  339,   69,   69,  431,
      333,  334,   69,   69,   69,   69,   69,   69,   69,   69,
      431,  341,   69,   69,   69,   69,  431,   69,   69,   69,
       69,  340,   69,   69,   69,   69,  342,   69,   69,   69,
       69,   69,   69,   69,   69,  431,   69,   69,  431,  345,
      431,  343,  346,  344,  431,  348,   69,   69,  347,   69,
       69,   69,   69,   69,   69,   69,   69,  351,   69,   69,
      350,  352,  431,  349,  431,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,  353,   69,   69,
      431,   69,   69,  431,  354,   69,   69,  355,  358,  431,

      359,  431,  356,   69,   69,  431,  361,  357,   69,   69,
       69,   69,  363,   69,   69,  431,  362,  364,  360,   69,
       69,   69,   69,   69,   69,  431,  365,   69,   69,   69,
       69,  368,   69,   69,  366,  431,  367,   69,   69,   69,
       69,   69,   69,  431,  369,  370,   69,   69,  371,   69,
       69,   69,   69,   69,   69,  377,   69,   69,  373,   69,
       69,  375,  372,   69,   69,   69,   69,  431,  374,   69,
       69,   69,   69,   69,   69,  431,   69,   69,   69,   69,
       69,   69,  378,   69,   69,  376,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,  381,   69,   69,   69,

       69,   69,   69,  379,  380,  382,   69,   69,   69,   69,
      431,  384,  431,  383,   69,   69,   69,   69,   69,   69,
       69,   69,  386,   69,   69,   69,   69,  431,  385,   69,
       69,  388,   69,   69,   69,   69,   69,   69,  387,  431,
      390,   69,   69,   69,   69,  389,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,  392,   69,
       69,  394,   69,   69,   69,   69,   69,   69,  391,   69,
       69,   69,   69,  393,  395,  398,  431,  396,   69,   69,
      431,  399,  400,  431,   69,   69,  431,  397,   69,   69,
       69,   69,  402,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,  401,  431,   69,   69,  431,  403,  404,
       69,   69,  431,  407,   69,   69,   69,   69,   69,   69,
      408,   69,   69,  431,  409,  405,   69,   69,  406,  410,
       69,   69,   69,   69,  431,  411,   69,   69,   69,   69,
       69,   69,   69,   69,  413,   69,   69,   69,   69,   69,
       69,   69,   69,  431,  412,  414,   69,   69,   69,   69,
      415,   69,   69,  417,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,  431,  416,  431,  419,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      431,  420,   69,   69,  431,  418,   69,   69,   69,   69,

       69,   69,   69,   69,  426,  431,  421,  431,  431,  431,
      422,  431,  431,  423,  431,  427,  431,  428,  431,  424,
      431,  425,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  429,  431,  431,  430,
       46,   46,   46,   46,   46,   46,   46,   46,   50,   50,
       50,   50,   50,   50,   50,   50,   56,   56,   57,  431,
       57,   57,   57,   57,   57,   57,   70,   70,   70,  125,
      431,  431,  125,  431,  125,  125,  125,  127,  431,  431,
      127,  127,  127,  127,  127,  130,  431,  431,  431,  130,
      130,  130,  130,  134,  431,  134,  134,  134,  134,  134,

      134,  137,  431,  431,  137,  137,  137,  137,  137,  144,
      144,   69,   69,   69,    7,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431
    } ;

static yyconst flex_int16_t yy_chk[1473] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,  135,    3,  134,    4,    5,    5,    5,    6,    6,
        6,   15,   15,   16,   19,   19,   16,   20,   20,  131,
       22,   22,   21,   21,   49,   23,   23,   49,   26,   26,
       44,   44,  130,    5,   22,   20,    6,   17,   21,   17,

       17,   23,   24,   24,   17,   17,   67,   17,   25,   25,
       39,   39,   24,   44,   17,   27,   27,   25,   44,   28,
       28,   26,   33,   33,   17,   17,   26,   63,   26,   67,
       17,   29,   29,   30,   30,   39,   31,   31,  127,   17,
       28,  127,   17,   58,   27,   32,   32,   28,   33,   27,
       28,  128,   27,   28,  128,   33,   29,   31,   34,   34,
       35,   35,   36,   36,   30,   29,   30,   31,   37,   37,
       31,   38,   38,   31,   64,   29,   30,   64,   64,   32,
       57,   40,   40,   36,   42,   42,   54,   36,   41,   41,
       43,   43,   34,   45,   45,  143,   36,   70,   70,   52,

       35,   71,   71,   37,   50,   37,   96,   96,   38,   40,
       40,   38,   48,   41,   66,   71,   41,   42,  143,   43,
       40,   66,   42,   40,   43,   41,  216,   45,   59,   59,
       62,   62,   41,   59,   59,   96,   62,   66,   72,   72,
       74,   74,   73,   73,   75,   75,   66,   18,   72,  216,
       74,   76,   76,   59,   59,   73,   62,   75,   77,   77,
       76,   78,   78,   79,   79,   80,   80,   81,   81,   82,
       82,   83,   83,   14,   84,   84,   85,   85,  141,   86,
       86,   11,   77,   88,   88,   91,   91,   87,   87,   89,
       89,   90,   90,   78,   82,   84,  281,   85,   92,   92,

        7,   81,   79,  141,   80,   93,   93,   94,   94,   83,
       83,   86,   86,   87,   95,   95,   97,   97,   87,   98,
       98,  281,   89,   88,    0,   91,   99,   99,    0,   90,
      100,  100,    0,   92,  101,  101,   93,   92,  102,  102,
        0,   94,  103,  103,  104,  104,  105,  105,  106,  106,
        0,   95,  107,  107,    0,   97,    0,   99,  108,  108,
      109,  109,  283,  100,    0,   99,  110,  110,  106,    0,
      102,  105,    0,  101,  111,  111,  112,  112,  113,  113,
      108,  107,    0,  104,  103,  283,  107,  109,    0,  109,
      114,  114,  115,  115,  116,  116,    0,  112,    0,  109,

      110,  111,  117,  117,  118,  118,    0,  113,  120,  120,
      119,  119,    0,  112,    0,  121,  121,  139,  139,  111,
        0,  115,  114,  122,  122,  123,  123,  124,  124,  115,
      138,  138,    0,  118,  116,  138,  138,  117,  116,  119,
      140,  140,  118,  144,  121,  120,  121,  145,  145,    0,
      144,  122,  145,    0,  123,  138,  138,  146,  146,  147,
      147,  148,  148,    0,  124,    0,  144,  149,  149,    0,
      146,  149,  150,  150,  148,  144,  151,  151,  152,  152,
      153,  153,  154,  154,  155,  155,  156,  156,  150,  158,
      158,    0,  157,  157,  159,  159,  151,  160,  160,  161,

      161,  162,  162,  154,  163,  163,    0,  156,  164,  164,
      165,  165,  158,    0,  153,  155,  154,  157,  167,  167,
      166,  166,  168,  168,    0,  163,  169,  169,  170,  170,
        0,  159,  165,  164,  161,  160,  171,  171,    0,  162,
      162,  166,    0,  167,  172,  172,  173,  173,  174,  174,
      175,  175,    0,  170,  168,  177,  177,  169,  176,  176,
      169,  178,  178,  181,  181,  172,  180,  180,  179,  179,
      182,  182,    0,  174,  171,  183,  183,  184,  184,  185,
      185,    0,  186,  186,  175,  187,  187,  176,  178,  179,
      182,  180,    0,  188,  188,  189,  189,  190,  190,  191,

      191,    0,  184,  194,  194,  192,  192,  193,  193,  195,
      195,    0,  183,  196,  196,    0,  187,    0,  197,  197,
      185,  186,  188,  198,  198,  199,  199,    0,  189,  200,
      200,    0,  193,  201,  201,    0,  191,  190,  192,  202,
      202,    0,  194,  203,  203,  204,  204,  205,  205,  195,
      206,  206,  196,  197,  200,  207,  207,  208,  208,  199,
        0,  198,  209,  209,  202,  210,  210,  211,  211,  215,
      217,  217,  220,  220,  204,    0,  215,  203,  208,  207,
      205,  218,  218,  209,    0,  218,    0,  211,    0,  206,
      219,  219,  215,    0,  219,    0,  210,  221,  221,  222,

      222,  215,  223,  223,  224,  224,    0,  221,  225,  225,
      226,  226,  227,  227,  228,  228,  229,  229,  230,  230,
      231,  231,  232,  232,  222,  233,  233,  234,  234,  235,
      235,  236,  236,    0,  237,  237,    0,  224,    0,  238,
      238,    0,  227,    0,  229,  225,  239,  239,  240,  240,
      241,  241,    0,  232,  242,  242,  234,    0,  231,  243,
      243,  244,  244,    0,  233,  237,  245,  245,    0,  235,
      236,  238,    0,  246,  246,  247,  247,  248,  248,  241,
      249,  249,  250,  250,  251,  251,  244,  252,  252,  254,
      254,  242,  253,  253,  255,  255,  243,    0,  256,  256,

      257,  257,  258,  258,  250,  245,  246,  259,  259,    0,
      248,    0,  252,  253,    0,  255,  260,  260,  261,  261,
      262,  262,  251,  256,    0,  254,  263,  263,    0,  257,
      264,  264,  265,  265,    0,  266,  266,  267,  267,    0,
      258,  268,  268,  269,  269,  262,  259,  270,  270,  271,
      271,  272,  272,  260,    0,  265,    0,  261,  266,  264,
      263,  273,  273,  274,  274,  275,  275,    0,  267,  276,
      276,  277,  277,  271,  278,  278,  279,  279,  271,  280,
      280,    0,  271,    0,  272,  269,  284,  284,  273,    0,
      274,  285,  285,  286,  286,  287,  287,  288,  288,  289,

      289,  279,  290,  290,  280,  275,  286,  291,  291,    0,
      277,  278,  292,  292,  293,  293,  294,  294,  295,  295,
        0,  288,  296,  296,  297,  297,    0,  298,  298,  299,
      299,  287,  300,  300,  301,  301,  294,  302,  302,  303,
      303,  304,  304,  305,  305,    0,  306,  306,    0,  297,
        0,  295,  298,  296,    0,  300,  307,  307,  299,  308,
      308,  309,  309,  310,  310,  311,  311,  305,  312,  312,
      302,  306,    0,  301,    0,  313,  313,  314,  314,  315,
      315,  316,  316,  317,  317,  318,  318,  307,  319,  319,
        0,  320,  320,    0,  308,  322,  322,  309,  313,    0,

      314,    0,  310,  321,  321,    0,  316,  312,  323,  323,
      324,  324,  319,  325,  325,    0,  317,  320,  315,  326,
      326,  327,  327,  329,  329,    0,  321,  328,  328,  330,
      330,  324,  331,  331,  322,    0,  323,  332,  332,  333,
      333,  334,  334,    0,  326,  327,  335,  335,  328,  336,
      336,  339,  339,  340,  340,  339,  341,  341,  332,  342,
      342,  334,  330,  343,  343,  344,  344,    0,  333,  345,
      345,  346,  346,  347,  347,    0,  348,  348,  349,  349,
      350,  350,  342,  351,  351,  336,  352,  352,  353,  353,
      354,  354,  355,  355,  356,  356,  347,  357,  357,  358,

      358,  359,  359,  343,  344,  348,  360,  360,  361,  361,
        0,  354,    0,  353,  362,  362,  363,  363,  364,  364,
      365,  365,  357,  366,  366,  367,  367,    0,  356,  368,
      368,  360,  369,  369,  370,  370,  372,  372,  358,    0,
      365,  371,  371,  373,  373,  361,  374,  374,  375,  375,
      376,  376,  377,  377,  378,  378,  379,  379,  369,  380,
      380,  372,  381,  381,  382,  382,  383,  383,  368,  384,
      384,  385,  385,  371,  373,  378,    0,  374,  386,  386,
        0,  379,  381,    0,  387,  387,    0,  375,  388,  388,
      390,  390,  384,  389,  389,  391,  391,  392,  392,  393,

      393,  395,  395,  382,    0,  394,  394,    0,  385,  387,
      396,  396,    0,  390,  397,  397,  398,  398,  399,  399,
      391,  400,  400,    0,  393,  388,  401,  401,  389,  394,
      402,  402,  403,  403,    0,  396,  404,  404,  405,  405,
      406,  406,  407,  407,  400,  408,  408,  409,  409,  410,
      410,  411,  411,    0,  398,  402,  412,  412,  413,  413,
      404,  414,  414,  407,  415,  415,  416,  416,  417,  417,
      418,  418,  419,  419,  420,  420,    0,  406,    0,  413,
      421,  421,  422,  422,  423,  423,  424,  424,  425,  425,
        0,  416,  426,  426,    0,  412,  427,  427,  428,  428,

      429,  429,  430,  430,  423,    0,  417,    0,    0,    0,
      419,    0,    0,  420,    0,  426,    0,  427,    0,  421,
        0,  422,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  428,    0,    0,  429,
      432,  432,  432,  432,  432,  432,  432,  432,  433,  433,
      433,  433,  433,  433,  433,  433,  434,  434,  435,    0,
      435,  435,  435,  435,  435,  435,  436,  436,  436,  437,
        0,    0,  437,    0,  437,  437,  437,  438,    0,    0,
      438,  438,  438,  438,  438,  439,    0,    0,    0,  439,
      439,  439,  439,  440,    0,  440,  440,  440,  440,  440,

      440,  441,    0,    0,  441,  441,  441,  441,  441,  442,
      442,  443,  443,  443,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int asm__flex_debug;
int asm__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *asm_text;
#line 1 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
#define YY_NO_INPUT 1
#line 14 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"

#include <stdio.h>
#include "tokenizer.h"


#line 965 "asmlexer.cpp"

#define INITIAL 0
#define comment 1
#define string_literal 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int asm_lex_destroy (void );

int asm_get_debug (void );

void asm_set_debug (int debug_flag  );

YY_EXTRA_TYPE asm_get_extra (void );

void asm_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *asm_get_in (void );

void asm_set_in  (FILE * _in_str  );

FILE *asm_get_out (void );

void asm_set_out  (FILE * _out_str  );

yy_size_t asm_get_leng (void );

char *asm_get_text (void );

int asm_get_lineno (void );

void asm_set_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int asm_wrap (void );
#else
extern int asm_wrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( asm_text, asm_leng, 1, asm_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( asm_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( asm_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, asm_in))==0 && ferror(asm_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(asm_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int asm_lex (void);

#define YY_DECL int asm_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after asm_text and asm_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! asm_in )
			asm_in = stdin;

		if ( ! asm_out )
			asm_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			asm_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				asm__create_buffer(asm_in,YY_BUF_SIZE );
		}

		asm__load_buffer_state( );
		}

	{
#line 22 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"

#line 1185 "asmlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of asm_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 432 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1415 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 23 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 24 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 25 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 26 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 27 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 28 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 29 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 30 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 31 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 32 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 33 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 34 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 40 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 41 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 42 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 43 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 44 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 45 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 46 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 47 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 48 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 49 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 61 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 62 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 63 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 64 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 65 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 66 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 67 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 68 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 69 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 70 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 71 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 72 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 73 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 74 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 75 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 76 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 77 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 78 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 79 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 80 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 81 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 82 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 83 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 84 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 85 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 86 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 87 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 88 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 89 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 90 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 91 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 92 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 93 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 94 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 95 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 96 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 97 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 99 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 100 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 101 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 102 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 103 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 104 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 106 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ BEGIN(comment); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 107 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 108 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 109 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 110 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 111 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 112 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ BEGIN(INITIAL); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 116 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_DIRECTIVE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 118 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ BEGIN(string_literal);    return(TOKENIZER_LITERAL); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 119 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 120 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 121 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 122 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 123 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ BEGIN(INITIAL);           return(TOKENIZER_LITERAL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 126 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 127 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 128 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 129 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 130 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 131 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 132 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 133 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 134 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 135 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 136 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 137 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 138 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 139 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 140 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 141 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 143 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 144 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 145 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 147 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 148 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 150 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 151 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 152 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 153 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 154 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 155 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 157 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"
ECHO;
	YY_BREAK
#line 1863 "asmlexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string_literal):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed asm_in at a new source and called
			 * asm_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = asm_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( asm_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * asm_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of asm_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					asm_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			asm_restart(asm_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) asm_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 432 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 432 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 431);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					asm_restart(asm_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( asm_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve asm_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void asm_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        asm_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            asm__create_buffer(asm_in,YY_BUF_SIZE );
	}

	asm__init_buffer(YY_CURRENT_BUFFER,input_file );
	asm__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void asm__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		asm_pop_buffer_state();
	 *		asm_push_buffer_state(new_buffer);
     */
	asm_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	asm__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (asm_wrap()) processing, but the only time this flag
	 * is looked at is after asm_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void asm__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	asm_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE asm__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) asm_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in asm__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) asm_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in asm__create_buffer()" );

	b->yy_is_our_buffer = 1;

	asm__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with asm__create_buffer()
 * 
 */
    void asm__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		asm_free((void *) b->yy_ch_buf  );

	asm_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a asm_restart() or at EOF.
 */
    static void asm__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	asm__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then asm__init_buffer was _probably_
     * called from asm_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void asm__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		asm__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void asm_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	asm_ensure_buffer_stack();

	/* This block is copied from asm__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from asm__switch_to_buffer. */
	asm__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void asm_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	asm__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		asm__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void asm_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)asm_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in asm_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)asm_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in asm_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE asm__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) asm_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in asm__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	asm__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to asm_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       asm__scan_bytes() instead.
 */
YY_BUFFER_STATE asm__scan_string (yyconst char * yystr )
{
    
	return asm__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to asm_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE asm__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) asm_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in asm__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = asm__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in asm__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up asm_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		asm_text[asm_leng] = (yy_hold_char); \
		(yy_c_buf_p) = asm_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		asm_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int asm_get_lineno  (void)
{
        
    return asm_lineno;
}

/** Get the input stream.
 * 
 */
FILE *asm_get_in  (void)
{
        return asm_in;
}

/** Get the output stream.
 * 
 */
FILE *asm_get_out  (void)
{
        return asm_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t asm_get_leng  (void)
{
        return asm_leng;
}

/** Get the current token.
 * 
 */

char *asm_get_text  (void)
{
        return asm_text;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void asm_set_lineno (int  _line_number )
{
    
    asm_lineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see asm__switch_to_buffer
 */
void asm_set_in (FILE *  _in_str )
{
        asm_in = _in_str ;
}

void asm_set_out (FILE *  _out_str )
{
        asm_out = _out_str ;
}

int asm_get_debug  (void)
{
        return asm__flex_debug;
}

void asm_set_debug (int  _bdebug )
{
        asm__flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from asm_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    asm_in = stdin;
    asm_out = stdout;
#else
    asm_in = (FILE *) 0;
    asm_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * asm_lex_init()
     */
    return 0;
}

/* asm_lex_destroy is for both reentrant and non-reentrant scanners. */
int asm_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		asm__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		asm_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	asm_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * asm_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *asm_alloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *asm_realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void asm_free (void * ptr )
{
			free( (char *) ptr );	/* see asm_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 157 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/asmlexer.lpp"



