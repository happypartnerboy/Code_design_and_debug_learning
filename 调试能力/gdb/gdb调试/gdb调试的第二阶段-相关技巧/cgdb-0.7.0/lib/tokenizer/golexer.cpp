#line 2 "golexer.cpp"

#line 4 "golexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer go__create_buffer
#define yy_delete_buffer go__delete_buffer
#define yy_flex_debug go__flex_debug
#define yy_init_buffer go__init_buffer
#define yy_flush_buffer go__flush_buffer
#define yy_load_buffer_state go__load_buffer_state
#define yy_switch_to_buffer go__switch_to_buffer
#define yyin go_in
#define yyleng go_leng
#define yylex go_lex
#define yylineno go_lineno
#define yyout go_out
#define yyrestart go_restart
#define yytext go_text
#define yywrap go_wrap
#define yyalloc go_alloc
#define yyrealloc go_realloc
#define yyfree go_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE go_restart(go_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t go_leng;

extern FILE *go_in, *go_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up go_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up go_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via go_restart()), so that the user can continue scanning by
	 * just pointing go_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when go_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t go_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow go_wrap()'s to do buffer switches
 * instead of setting up a fresh go_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void go_restart (FILE *input_file  );
void go__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE go__create_buffer (FILE *file,int size  );
void go__delete_buffer (YY_BUFFER_STATE b  );
void go__flush_buffer (YY_BUFFER_STATE b  );
void go_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void go_pop_buffer_state (void );

static void go_ensure_buffer_stack (void );
static void go__load_buffer_state (void );
static void go__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER go__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE go__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE go__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE go__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *go_alloc (yy_size_t  );
void *go_realloc (void *,yy_size_t  );
void go_free (void *  );

#define yy_new_buffer go__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        go_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            go__create_buffer(go_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        go_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            go__create_buffer(go_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define go_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *go_in = (FILE *) 0, *go_out = (FILE *) 0;

typedef int yy_state_type;

extern int go_lineno;

int go_lineno = 1;

extern char *go_text;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr go_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up go_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	go_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[262] =
    {   0,
        0,    0,   45,   45,   55,   55,   61,   61,   73,   73,
       87,   85,   83,   80,   82,   54,   72,   85,   85,   68,
       68,   84,   84,   60,   84,   84,   84,   84,   84,   84,
       71,   84,   84,   84,   84,   84,   84,   84,   45,   47,
       48,   46,   55,   56,   57,   59,   86,   61,   62,   63,
       65,   73,   74,   75,   77,   73,   81,    0,    0,   69,
        0,   71,   44,   51,   68,   68,    0,    0,   70,    0,
       84,   84,    0,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   34,   36,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   45,   49,   46,   46,   50,   55,    0,   58,
       61,   64,   73,   73,   76,   73,   73,   78,    0,   78,
        0,    0,   51,   68,    0,    0,   68,   67,   66,   71,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   33,   84,   84,   84,    3,   22,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   43,   79,    0,
       69,    0,   68,    1,   84,   16,   25,   23,   84,   84,
       84,   84,   84,   30,   84,   84,   84,   20,   35,   84,
       84,   84,   84,    8,   84,   84,   84,   84,   17,   84,
       84,   84,   84,   41,   42,    2,   24,   84,   26,   84,

       84,   29,   84,   32,   84,   84,    9,   10,   11,   84,
       84,   37,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   52,   84,   84,
       38,   39,   18,   19,   40,    5,    6,    7,   84,   84,
       84,   28,   84,   12,   13,   84,   53,    4,   84,   84,
       27,   84,   84,   84,   14,   84,   21,   15,   84,   31,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    1,
        1,    7,    8,    1,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   16,   18,   16,    1,    1,    1,
        1,    1,    1,    1,   19,   19,   19,   19,   20,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   21,   21,
        1,   23,    1,    1,   19,   24,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   21,   34,   35,   36,   37,
       38,   39,   21,   40,   41,   42,   43,   44,   45,   46,
       47,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[48] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    1,    1,
        8,    8,    8,    8,    8,    8,    8,    8,    9,   10,
       11,   11,    1,   12,    9,    9,    9,    9,   10,    9,
       11,   11,   13,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11
    } ;

static yyconst flex_uint16_t yy_base[285] =
    {   0,
        0,    0,   45,   47,   52,   55,   58,   60,   62,   66,
      421, 1031, 1031, 1031,  410, 1031,  388,   47,   64,   81,
       31,  117,  128, 1031,  136,   75,   79,  375,  130,   41,
      142,  146,  150,  156,  162,   64,  168,  173,    0, 1031,
      396,   76,  373, 1031,  382, 1031,  372,    0, 1031,  362,
     1031,  340, 1031,  359, 1031,  100, 1031,  350,  325,   92,
      322, 1031, 1031,    0,  185,  115,  320,    0, 1031,    0,
        0,  119,  314,  210,  120,  200,  192,  195,  206,  212,
      224,  220,  228,  172,  232,  236,  240,  246,  250,  254,
      260,  264,  268,  272,  280,  286,  285,  296,  297,  307,

      301,  311,    0, 1031,  185,  306, 1031,  286,  298, 1031,
        0, 1031,  272,  336, 1031,  262,  344, 1031,  275,  271,
      249,   83,    0,  236,  247,  243,  130,    0,    0,    0,
      317,  328,  331,  332,  336,  342,  346,  365,  362,  357,
      376,  368,  380,  379,  384,  420,  395,  405,  410,  416,
      415,  432,  431,  435,  447,  451,  446,  443, 1031,  237,
      154,  229,  208,  457,  462,  461,  465,  473,  479,  483,
      489,  494,  493,  504,  505,  510,  516,  515,  521,  526,
      200,  156,  149,    0,  527,  544,  541,  538,  549,  559,
      555,  563,  567,  571,  575,  607,  588,  591,  592,  603,

      607,  611,  621,  617,  646,  627,    0,    0,    0,  632,
      635,  638,  643,  649,  657,  660,  671,  139,  111,  105,
      668,  674,  679,  685,  654,  105,   94,  690,  691,  695,
      696,  701,  706,  707,  711,    0,    0,    0,  712,  743,
      727,  723,  724,    0,    0,  739,  735,  738,   92,   72,
      749,  754,  755,   55,    0,  760,  765,    0,  776,  766,
     1031,  823,  836,  849,  862,  875,  881,  887,  900,  913,
      926,  939,  952,  965,  978,  985,  993,  999, 1006, 1007,
     1010, 1013, 1020, 1022
    } ;

static yyconst flex_int16_t yy_def[285] =
    {   0,
      261,    1,  262,  262,  263,  263,  264,  264,  265,  265,
      261,  261,  261,  261,  261,  261,  266,  267,  261,  261,
       20,  268,  268,  261,  268,   25,   25,   23,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  269,  261,
      261,  270,  271,  261,  261,  261,  271,  272,  261,  261,
      261,  273,  261,  261,  261,  274,  261,  261,  275,  267,
      276,  261,  261,  277,  278,   20,  279,  280,  261,  281,
      282,   25,  276,  282,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,  269,  261,  270,  270,  261,  271,  271,  261,
      272,  261,  273,  274,  261,  273,  274,  261,  261,  261,
      283,  276,  277,  278,  284,  279,  279,  280,  281,  282,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  261,  283,
      283,  284,  284,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
      282,  282,  282,  282,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  146,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,  282,  282,  282,   25,
       25,   25,   25,   25,   25,   25,   25,  282,  282,  282,
       25,   25,   25,   25,   25,  282,  282,   25,   25,   25,
       25,   25,   25,   25,   25,  282,  282,  282,   25,   25,
       25,   25,   25,  282,  282,   25,   25,   25,  282,  282,
       25,   25,   25,  282,  282,   25,   25,  282,   25,   25,
        0,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261
    } ;

static yyconst flex_uint16_t yy_nxt[1079] =
    {   0,
       12,   13,   14,   15,   16,   17,   12,   12,   18,   19,
       20,   21,   21,   21,   21,   21,   21,   21,   22,   23,
       22,   22,   12,   24,   22,   25,   26,   27,   28,   29,
       30,   22,   31,   22,   22,   32,   22,   22,   33,   34,
       35,   36,   37,   38,   22,   22,   22,   40,   41,   40,
       41,   42,  261,   42,   44,   45,   46,   44,   45,   46,
       49,   50,   49,   50,   53,   54,   61,   55,   53,   54,
       63,   55,  258,   64,   47,   61,  261,   47,   87,   62,
       72,   51,  106,   51,   56,  107,  255,   72,   56,   65,
      261,   66,   66,   66,   66,   66,   66,   66,   66,   78,

       67,   72,   68,   99,  254,  113,   79,   81,  245,   67,
      100,  121,   80,   69,   72,   62,   72,  244,   72,  238,
      121,   72,  117,  237,   62,   72,   70,   71,   71,   71,
       71,   71,   71,   71,   71,   73,  261,  261,   74,   74,
       74,   74,   74,   74,   74,   74,   71,   71,   71,   71,
       71,   71,   71,   71,   83,  236,   72,  131,   72,   72,
      261,  261,   62,  209,   84,   72,   72,   85,  208,   72,
       91,   88,   86,   75,   92,   76,   72,   89,   90,   72,
       93,   72,   77,   72,   94,   72,   62,   72,   72,   72,
       96,  261,   72,   72,  261,   72,   72,  102,   95,   72,

      101,   72,   72,   97,  125,   72,   98,   72,   72,  141,
       72,   72,   72,  125,   72,  261,  207,   62,   72,   72,
       74,   74,   74,   74,   74,   74,   74,   74,  132,   72,
      135,   72,   72,  133,   72,  134,  261,   72,   72,   72,
       62,   72,  130,   72,  261,   72,   72,  136,  137,   72,
      261,   72,   72,  138,  162,   67,  160,   72,   72,   72,
      139,   72,  140,   72,   67,   72,   72,   72,   62,   72,
       72,  142,  143,   72,   72,   72,  159,   72,   72,   72,
      159,  144,   72,   72,  114,   72,   72,   72,  145,   72,
      148,   72,   72,   72,  114,  146,   72,   72,  147,   72,

       72,   72,  108,   72,  149,   72,   72,   72,  109,   72,
       72,   72,  106,  150,   72,  107,  151,   72,   72,   72,
      152,  261,   72,   72,  153,   72,   72,  126,  154,   73,
      120,   72,   72,   72,   72,   72,   72,  157,   72,  155,
       72,  113,   72,   72,   72,  156,   72,   72,   72,  113,
      158,  164,  165,   72,   72,  118,   72,   72,  117,  166,
      167,  115,  114,   72,  112,   72,  117,   72,   72,   72,
       72,   72,  168,   72,   72,   72,  108,   72,   72,   72,
      169,   72,   72,   72,  110,   72,  170,  171,   72,  172,
      174,  175,   72,  173,   72,  109,   72,  176,  104,   72,

      177,   72,   72,   72,   72,   72,  178,   72,   72,   82,
       59,   72,   57,   72,   72,   72,  179,   72,   72,   72,
      261,  180,   72,   72,  261,   72,   72,  261,  261,  261,
       72,  181,   72,  182,   72,  261,  183,  184,  186,  261,
      187,   72,   72,  189,   72,  261,  261,   72,  185,   72,
      261,   72,   72,   72,   72,   72,   72,   72,  188,   72,
      190,   72,   72,  191,  261,  261,   72,  261,   72,   72,
       72,   72,   72,  192,   72,  194,  193,   72,   72,  195,
       72,   72,   72,   72,   72,   72,   72,  196,   72,   72,
       72,  261,   72,   72,   72,  197,   72,   72,   72,   72,

       72,   72,   72,   72,   72,  261,  261,   72,   72,  261,
       72,   72,   72,  198,  261,  261,   72,  261,   72,   72,
       72,  200,   72,  261,  199,   72,   72,  261,   72,   72,
       72,   72,  202,   72,  261,   72,  201,  261,  204,   72,
       72,   72,   72,   72,   72,  261,  203,   72,  261,   72,
       72,   72,   72,   72,   72,   72,   72,  205,   72,  261,
       72,   72,   72,   72,   72,  206,  210,   72,  211,  212,
      261,  261,   72,   72,  261,   72,  261,  213,   72,  261,
       72,   72,  261,   72,   72,  214,   72,   72,   72,  216,
       72,  215,   72,  217,   72,   72,   72,  261,   72,  261,

       72,   72,   72,  261,   72,   72,   72,  261,   72,   72,
       72,  261,   72,   72,   72,  261,  261,   72,  218,  222,
      219,   72,  261,  220,   71,   72,  261,   72,   72,   72,
       72,   72,  261,  261,   72,   72,  261,   72,   72,  223,
       72,  224,   72,  261,   72,  221,   72,  261,   72,   72,
       72,  261,  225,   72,   72,  261,   72,   72,   72,  226,
       72,  229,  227,   72,   72,  230,   72,   72,  228,   72,
      261,   72,   72,   72,   72,   72,  261,   72,   72,  231,
       72,   72,   72,   72,   72,   72,   72,  233,   72,   72,
      232,   72,   72,  243,   72,   72,   72,   72,  261,   72,

       72,  234,  235,   72,  261,   72,   72,   72,   72,  239,
       72,   72,  261,   72,   72,  246,   72,   72,   72,  240,
       72,  241,   72,  247,   72,   72,  242,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  261,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  248,   72,   72,  249,  251,  261,   72,   72,  250,
       72,  252,   72,   72,   72,  253,   72,  261,  261,   72,
       72,  261,   72,   72,   72,   72,   72,   72,   72,  261,
       72,   72,   72,  257,   72,   72,   72,  261,   72,   72,
      259,   72,   72,   72,   72,   72,  256,   72,  261,   72,

       72,   72,   72,   72,   72,   72,   72,  260,  261,  261,
      261,   72,   72,   72,  261,   72,  261,  261,  261,  261,
      261,  261,   72,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   58,  261,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   60,  261,
       60,  261,  261,   60,   72,   72,   72,   72,  261,   72,

      103,  261,  261,  103,  103,  261,  103,  103,  103,  103,
      103,  103,  103,  105,  261,  261,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  108,  261,  261,  261,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  111,
      261,  261,  111,  111,  111,  111,  111,  111,  111,  111,
      261,  111,  113,  261,  261,  113,  261,  113,  113,  113,
      113,  113,  113,  113,  113,  116,  261,  261,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  119,  261,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  122,  122,  123,  261,  261,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  124,  261,  124,  261,
      261,  124,  127,  127,  128,  128,  128,  129,  129,  129,
       71,   71,   71,   71,  261,   71,  161,  161,  163,  163,
       11,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261
    } ;

static yyconst flex_int16_t yy_chk[1079] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    3,   21,    4,    5,    5,    5,    6,    6,    6,
        7,    7,    8,    8,    9,    9,   18,    9,   10,   10,
       19,   10,  254,   19,    5,   18,   21,    6,   30,   18,
       30,    7,   42,    8,    9,   42,  250,   30,   10,   20,
      122,   20,   20,   20,   20,   20,   20,   20,   20,   26,

       20,   36,   20,   36,  249,   56,   26,   27,  227,   20,
       36,   60,   26,   20,   26,  122,   27,  226,   27,  220,
       60,   26,   56,  219,   60,   27,   20,   22,   22,   22,
       22,   22,   22,   22,   22,   23,   66,  127,   23,   23,
       23,   23,   23,   23,   23,   23,   25,   25,   25,   25,
       25,   25,   25,   25,   29,  218,   72,   75,   72,   75,
       66,  161,  127,  183,   29,   72,   75,   29,  182,   29,
       32,   31,   29,   25,   33,   25,   29,   31,   31,   31,
       34,   31,   25,   32,   34,   32,  161,   33,   31,   33,
       35,  105,   32,   34,  105,   34,   33,   38,   34,   35,

       37,   35,   34,   35,   65,   37,   35,   37,   35,   84,
       38,   84,   38,   65,   37,  163,  181,   65,   84,   38,
       74,   74,   74,   74,   74,   74,   74,   74,   76,   77,
       79,   77,   78,   77,   78,   78,  162,   76,   77,   76,
      163,   78,   74,   79,  160,   79,   76,   80,   80,   80,
      126,   80,   79,   81,  125,  124,  121,   82,   80,   82,
       82,   81,   83,   81,  124,   83,   82,   83,  124,   85,
       81,   85,   86,   86,   83,   86,  120,   87,   85,   87,
      119,   87,   86,   88,  116,   88,   87,   89,   89,   89,
       92,   90,   88,   90,  113,   90,   89,   91,   91,   91,

       90,   92,  109,   92,   93,   93,   91,   93,  108,   94,
       92,   94,  106,   94,   93,  106,   95,   95,   94,   95,
       96,   73,   97,   96,   97,   96,   95,   67,   98,   61,
       59,   97,   96,   98,   99,   98,   99,  101,  101,   99,
      101,  114,   98,   99,  100,  100,  100,  101,  102,  117,
      102,  131,  132,  100,  131,   58,  131,  102,  114,  133,
      134,   54,   52,  131,   50,  132,  117,  132,  133,  134,
      133,  134,  135,  135,  132,  135,   47,  133,  134,  136,
      136,  136,  135,  137,   45,  137,  137,  137,  136,  138,
      139,  140,  137,  138,  140,   43,  140,  140,   41,  139,

      141,  139,  138,  140,  138,  142,  143,  142,  139,   28,
       17,  138,   15,  141,  142,  141,  144,  143,  144,  143,
       11,  145,  141,  145,    0,  144,  143,    0,    0,    0,
      145,  146,  147,  146,  147,    0,  146,  146,  148,    0,
      149,  147,  148,  151,  148,    0,    0,  149,  146,  149,
        0,  148,  151,  150,  151,  150,  149,  146,  150,  146,
      152,  151,  150,  153,    0,    0,  146,    0,  153,  152,
      153,  152,  154,  153,  154,  155,  154,  153,  152,  156,
      158,  154,  158,  157,  155,  157,  155,  157,  156,  158,
      156,    0,  157,  155,  164,  165,  164,  156,  166,  165,

      166,  165,  167,  164,  167,    0,    0,  166,  165,    0,
      168,  167,  168,  169,    0,    0,  169,    0,  169,  168,
      170,  171,  170,    0,  170,  169,  171,    0,  171,  170,
      173,  172,  173,  172,    0,  171,  172,    0,  176,  173,
      172,  174,  175,  174,  175,    0,  175,  176,    0,  176,
      174,  175,  178,  177,  178,  177,  176,  177,  179,    0,
      179,  178,  177,  180,  185,  180,  185,  179,  186,  187,
        0,    0,  180,  185,    0,  188,    0,  188,  187,    0,
      187,  186,    0,  186,  188,  190,  189,  187,  189,  192,
      186,  191,  191,  193,  191,  189,  190,    0,  190,    0,

      192,  191,  192,    0,  193,  190,  193,    0,  194,  192,
      194,    0,  195,  193,  195,    0,    0,  194,  196,  198,
      196,  195,    0,  196,  196,  197,    0,  197,  198,  199,
      198,  199,    0,    0,  197,  196,    0,  198,  199,  200,
      200,  201,  200,    0,  201,  196,  201,    0,  202,  200,
      202,    0,  203,  201,  204,    0,  204,  202,  203,  205,
      203,  210,  205,  204,  206,  211,  206,  203,  206,  210,
        0,  210,  211,  206,  211,  212,    0,  212,  210,  213,
      213,  211,  213,  205,  212,  205,  214,  215,  214,  213,
      214,  225,  205,  225,  215,  214,  215,  216,    0,  216,

      225,  216,  217,  215,    0,  221,  216,  221,  217,  221,
      217,  222,    0,  222,  221,  229,  223,  217,  223,  222,
      222,  223,  224,  230,  224,  223,  224,  228,  229,  228,
      229,  224,  230,  231,  230,  231,  228,  229,  232,    0,
      232,  230,  231,  233,  234,  233,  234,  232,  235,  239,
      235,  239,  233,  234,  240,  241,    0,  235,  239,  240,
      242,  243,  242,  243,  241,  246,  241,    0,    0,  242,
      243,    0,  247,  241,  247,  248,  246,  248,  246,    0,
      240,  247,  240,  253,  248,  246,  251,    0,  251,  240,
      256,  252,  253,  252,  253,  251,  252,  256,    0,  256,

      252,  253,  257,  260,  257,  260,  256,  259,    0,    0,
        0,  257,  260,  259,    0,  259,    0,    0,    0,    0,
        0,    0,  259,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  266,    0,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  267,    0,
      267,    0,    0,  267,  268,  268,  268,  268,    0,  268,

      269,    0,    0,  269,  269,    0,  269,  269,  269,  269,
      269,  269,  269,  270,    0,    0,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  271,    0,    0,    0,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  272,
        0,    0,  272,  272,  272,  272,  272,  272,  272,  272,
        0,  272,  273,    0,    0,  273,    0,  273,  273,  273,
      273,  273,  273,  273,  273,  274,    0,    0,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  275,    0,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  276,  276,  277,    0,    0,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  278,    0,  278,    0,
        0,  278,  279,  279,  280,  280,  280,  281,  281,  281,
      282,  282,  282,  282,    0,  282,  283,  283,  284,  284,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int go__flex_debug;
int go__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *go_text;
#line 1 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
#define YY_NO_INPUT 1
#line 23 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"

#include <stdio.h>
#include "tokenizer.h"




#line 823 "golexer.cpp"

#define INITIAL 0
#define comment 1
#define string_literal 2
#define alt_wysiwyg_literal 3
#define unicode_literal 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int go_lex_destroy (void );

int go_get_debug (void );

void go_set_debug (int debug_flag  );

YY_EXTRA_TYPE go_get_extra (void );

void go_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *go_get_in (void );

void go_set_in  (FILE * _in_str  );

FILE *go_get_out (void );

void go_set_out  (FILE * _out_str  );

yy_size_t go_get_leng (void );

char *go_get_text (void );

int go_get_lineno (void );

void go_set_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int go_wrap (void );
#else
extern int go_wrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( go_text, go_leng, 1, go_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( go_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( go_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, go_in))==0 && ferror(go_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(go_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int go_lex (void);

#define YY_DECL int go_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after go_text and go_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! go_in )
			go_in = stdin;

		if ( ! go_out )
			go_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			go_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				go__create_buffer(go_in,YY_BUF_SIZE );
		}

		go__load_buffer_state( );
		}

	{
#line 33 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"

#line 1045 "golexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of go_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 262 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1031 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 35 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 37 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 38 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 39 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 40 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 41 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 42 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 43 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 44 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 45 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 46 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 47 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 48 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 49 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 50 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 51 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 52 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 53 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 54 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 55 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 56 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TYPE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_KEYWORD); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 79 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(comment); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 80 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 81 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 82 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 83 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 84 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 85 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(INITIAL); return(TOKENIZER_COMMENT); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 87 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_COMMENT); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 89 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_DIRECTIVE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 90 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_DIRECTIVE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 92 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(string_literal);    return(TOKENIZER_LITERAL); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 94 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 95 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 96 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 97 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(INITIAL);           return(TOKENIZER_LITERAL); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 99 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(alt_wysiwyg_literal);    return(TOKENIZER_LITERAL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 100 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 101 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 102 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 103 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 104 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(INITIAL);            return(TOKENIZER_LITERAL); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 106 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 107 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 108 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 109 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
/* imaginary */
case 70:
YY_RULE_SETUP
#line 112 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
/* rune */
/* It's a dirty little trick, since cgdb will never see ilegal program that can't pass compiler
     * check we just assume anything between single quote would be unicode literal
    */
case 72:
YY_RULE_SETUP
#line 119 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(unicode_literal);    return(TOKENIZER_LITERAL); }
	YY_BREAK
/*
    <unicode_literal>{unicode_val}|{byte_val}       { return(TOKENIZER_LITERAL); }
    */
case 73:
YY_RULE_SETUP
#line 123 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 124 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 126 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ BEGIN(INITIAL);    return(TOKENIZER_LITERAL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 129 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 130 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_LITERAL); }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 132 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 133 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_NEWLINE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
{ return(TOKENIZER_TEXT);    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"
ECHO;
	YY_BREAK
#line 1550 "golexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string_literal):
case YY_STATE_EOF(alt_wysiwyg_literal):
case YY_STATE_EOF(unicode_literal):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed go_in at a new source and called
			 * go_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = go_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( go_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * go_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of go_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					go_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			go_restart(go_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) go_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 262 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 262 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 261);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					go_restart(go_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( go_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve go_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void go_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        go_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            go__create_buffer(go_in,YY_BUF_SIZE );
	}

	go__init_buffer(YY_CURRENT_BUFFER,input_file );
	go__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void go__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		go_pop_buffer_state();
	 *		go_push_buffer_state(new_buffer);
     */
	go_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	go__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (go_wrap()) processing, but the only time this flag
	 * is looked at is after go_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void go__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	go_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE go__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) go_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in go__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) go_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in go__create_buffer()" );

	b->yy_is_our_buffer = 1;

	go__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with go__create_buffer()
 * 
 */
    void go__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		go_free((void *) b->yy_ch_buf  );

	go_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a go_restart() or at EOF.
 */
    static void go__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	go__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then go__init_buffer was _probably_
     * called from go_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void go__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		go__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void go_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	go_ensure_buffer_stack();

	/* This block is copied from go__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from go__switch_to_buffer. */
	go__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void go_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	go__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		go__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void go_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)go_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in go_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)go_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in go_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE go__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) go_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in go__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	go__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to go_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       go__scan_bytes() instead.
 */
YY_BUFFER_STATE go__scan_string (yyconst char * yystr )
{
    
	return go__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to go_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE go__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) go_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in go__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = go__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in go__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up go_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		go_text[go_leng] = (yy_hold_char); \
		(yy_c_buf_p) = go_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		go_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int go_get_lineno  (void)
{
        
    return go_lineno;
}

/** Get the input stream.
 * 
 */
FILE *go_get_in  (void)
{
        return go_in;
}

/** Get the output stream.
 * 
 */
FILE *go_get_out  (void)
{
        return go_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t go_get_leng  (void)
{
        return go_leng;
}

/** Get the current token.
 * 
 */

char *go_get_text  (void)
{
        return go_text;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void go_set_lineno (int  _line_number )
{
    
    go_lineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see go__switch_to_buffer
 */
void go_set_in (FILE *  _in_str )
{
        go_in = _in_str ;
}

void go_set_out (FILE *  _out_str )
{
        go_out = _out_str ;
}

int go_get_debug  (void)
{
        return go__flex_debug;
}

void go_set_debug (int  _bdebug )
{
        go__flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from go_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    go_in = stdin;
    go_out = stdout;
#else
    go_in = (FILE *) 0;
    go_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * go_lex_init()
     */
    return 0;
}

/* go_lex_destroy is for both reentrant and non-reentrant scanners. */
int go_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		go__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		go_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	go_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * go_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *go_alloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *go_realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void go_free (void * ptr )
{
			free( (char *) ptr );	/* see go_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 139 "/home/bob/rcs/git/cgdb/master/cgdb/lib/tokenizer/golexer.lpp"



